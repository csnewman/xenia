// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: virtnet_packets.proto

#ifndef PROTOBUF_INCLUDED_virtnet_5fpackets_2eproto
#define PROTOBUF_INCLUDED_virtnet_5fpackets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_virtnet_5fpackets_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_virtnet_5fpackets_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class CreateSocketRequest;
class CreateSocketRequestDefaultTypeInternal;
extern CreateSocketRequestDefaultTypeInternal _CreateSocketRequest_default_instance_;
class CreateSocketResponse;
class CreateSocketResponseDefaultTypeInternal;
extern CreateSocketResponseDefaultTypeInternal _CreateSocketResponse_default_instance_;
class DataMessage;
class DataMessageDefaultTypeInternal;
extern DataMessageDefaultTypeInternal _DataMessage_default_instance_;
class ManagementMessage;
class ManagementMessageDefaultTypeInternal;
extern ManagementMessageDefaultTypeInternal _ManagementMessage_default_instance_;
class VirtNetMessage;
class VirtNetMessageDefaultTypeInternal;
extern VirtNetMessageDefaultTypeInternal _VirtNetMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::CreateSocketRequest* Arena::CreateMaybeMessage<::CreateSocketRequest>(Arena*);
template<> ::CreateSocketResponse* Arena::CreateMaybeMessage<::CreateSocketResponse>(Arena*);
template<> ::DataMessage* Arena::CreateMaybeMessage<::DataMessage>(Arena*);
template<> ::ManagementMessage* Arena::CreateMaybeMessage<::ManagementMessage>(Arena*);
template<> ::VirtNetMessage* Arena::CreateMaybeMessage<::VirtNetMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class VirtNetMessage final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:VirtNetMessage) */ {
 public:
  VirtNetMessage();
  virtual ~VirtNetMessage();

  VirtNetMessage(const VirtNetMessage& from);

  inline VirtNetMessage& operator=(const VirtNetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtNetMessage(VirtNetMessage&& from) noexcept
    : VirtNetMessage() {
    *this = ::std::move(from);
  }

  inline VirtNetMessage& operator=(VirtNetMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const VirtNetMessage& default_instance();

  enum ContentCase {
    kManagementMessage = 3,
    kDataMessage = 4,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtNetMessage* internal_default_instance() {
    return reinterpret_cast<const VirtNetMessage*>(
               &_VirtNetMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VirtNetMessage* other);
  friend void swap(VirtNetMessage& a, VirtNetMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtNetMessage* New() const final {
    return CreateMaybeMessage<VirtNetMessage>(nullptr);
  }

  VirtNetMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VirtNetMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VirtNetMessage& from);
  void MergeFrom(const VirtNetMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VirtNetMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_response = 1;
  void clear_is_response();
  static const int kIsResponseFieldNumber = 1;
  bool is_response() const;
  void set_is_response(bool value);

  // uint32 response_target = 2;
  void clear_response_target();
  static const int kResponseTargetFieldNumber = 2;
  ::google::protobuf::uint32 response_target() const;
  void set_response_target(::google::protobuf::uint32 value);

  // .ManagementMessage management_message = 3;
  bool has_management_message() const;
  void clear_management_message();
  static const int kManagementMessageFieldNumber = 3;
  const ::ManagementMessage& management_message() const;
  ::ManagementMessage* release_management_message();
  ::ManagementMessage* mutable_management_message();
  void set_allocated_management_message(::ManagementMessage* management_message);

  // .DataMessage data_message = 4;
  bool has_data_message() const;
  void clear_data_message();
  static const int kDataMessageFieldNumber = 4;
  const ::DataMessage& data_message() const;
  ::DataMessage* release_data_message();
  ::DataMessage* mutable_data_message();
  void set_allocated_data_message(::DataMessage* data_message);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:VirtNetMessage)
 private:
  class HasBitSetters;
  void set_has_management_message();
  void set_has_data_message();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool is_response_;
  ::google::protobuf::uint32 response_target_;
  union ContentUnion {
    ContentUnion() {}
    ::ManagementMessage* management_message_;
    ::DataMessage* data_message_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_virtnet_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class ManagementMessage final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ManagementMessage) */ {
 public:
  ManagementMessage();
  virtual ~ManagementMessage();

  ManagementMessage(const ManagementMessage& from);

  inline ManagementMessage& operator=(const ManagementMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManagementMessage(ManagementMessage&& from) noexcept
    : ManagementMessage() {
    *this = ::std::move(from);
  }

  inline ManagementMessage& operator=(ManagementMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ManagementMessage& default_instance();

  enum ContentCase {
    kCreateSocketRequest = 1,
    kCreateSocketResponse = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagementMessage* internal_default_instance() {
    return reinterpret_cast<const ManagementMessage*>(
               &_ManagementMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ManagementMessage* other);
  friend void swap(ManagementMessage& a, ManagementMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManagementMessage* New() const final {
    return CreateMaybeMessage<ManagementMessage>(nullptr);
  }

  ManagementMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ManagementMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ManagementMessage& from);
  void MergeFrom(const ManagementMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ManagementMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CreateSocketRequest create_socket_request = 1;
  bool has_create_socket_request() const;
  void clear_create_socket_request();
  static const int kCreateSocketRequestFieldNumber = 1;
  const ::CreateSocketRequest& create_socket_request() const;
  ::CreateSocketRequest* release_create_socket_request();
  ::CreateSocketRequest* mutable_create_socket_request();
  void set_allocated_create_socket_request(::CreateSocketRequest* create_socket_request);

  // .CreateSocketResponse create_socket_response = 2;
  bool has_create_socket_response() const;
  void clear_create_socket_response();
  static const int kCreateSocketResponseFieldNumber = 2;
  const ::CreateSocketResponse& create_socket_response() const;
  ::CreateSocketResponse* release_create_socket_response();
  ::CreateSocketResponse* mutable_create_socket_response();
  void set_allocated_create_socket_response(::CreateSocketResponse* create_socket_response);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:ManagementMessage)
 private:
  class HasBitSetters;
  void set_has_create_socket_request();
  void set_has_create_socket_response();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union ContentUnion {
    ContentUnion() {}
    ::CreateSocketRequest* create_socket_request_;
    ::CreateSocketResponse* create_socket_response_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_virtnet_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class CreateSocketRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CreateSocketRequest) */ {
 public:
  CreateSocketRequest();
  virtual ~CreateSocketRequest();

  CreateSocketRequest(const CreateSocketRequest& from);

  inline CreateSocketRequest& operator=(const CreateSocketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateSocketRequest(CreateSocketRequest&& from) noexcept
    : CreateSocketRequest() {
    *this = ::std::move(from);
  }

  inline CreateSocketRequest& operator=(CreateSocketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CreateSocketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSocketRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSocketRequest*>(
               &_CreateSocketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateSocketRequest* other);
  friend void swap(CreateSocketRequest& a, CreateSocketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateSocketRequest* New() const final {
    return CreateMaybeMessage<CreateSocketRequest>(nullptr);
  }

  CreateSocketRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateSocketRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CreateSocketRequest& from);
  void MergeFrom(const CreateSocketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateSocketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 address_family = 1;
  void clear_address_family();
  static const int kAddressFamilyFieldNumber = 1;
  ::google::protobuf::uint32 address_family() const;
  void set_address_family(::google::protobuf::uint32 value);

  // uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 protocol = 3;
  void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  ::google::protobuf::uint32 protocol() const;
  void set_protocol(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CreateSocketRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 address_family_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 protocol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtnet_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class CreateSocketResponse final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CreateSocketResponse) */ {
 public:
  CreateSocketResponse();
  virtual ~CreateSocketResponse();

  CreateSocketResponse(const CreateSocketResponse& from);

  inline CreateSocketResponse& operator=(const CreateSocketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateSocketResponse(CreateSocketResponse&& from) noexcept
    : CreateSocketResponse() {
    *this = ::std::move(from);
  }

  inline CreateSocketResponse& operator=(CreateSocketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CreateSocketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSocketResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSocketResponse*>(
               &_CreateSocketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateSocketResponse* other);
  friend void swap(CreateSocketResponse& a, CreateSocketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateSocketResponse* New() const final {
    return CreateMaybeMessage<CreateSocketResponse>(nullptr);
  }

  CreateSocketResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateSocketResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CreateSocketResponse& from);
  void MergeFrom(const CreateSocketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateSocketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 handle = 2;
  void clear_handle();
  static const int kHandleFieldNumber = 2;
  ::google::protobuf::uint32 handle() const;
  void set_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CreateSocketResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 handle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtnet_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class DataMessage final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:DataMessage) */ {
 public:
  DataMessage();
  virtual ~DataMessage();

  DataMessage(const DataMessage& from);

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataMessage(DataMessage&& from) noexcept
    : DataMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage& operator=(DataMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DataMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage*>(
               &_DataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DataMessage* other);
  friend void swap(DataMessage& a, DataMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataMessage* New() const final {
    return CreateMaybeMessage<DataMessage>(nullptr);
  }

  DataMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 fake = 1;
  void clear_fake();
  static const int kFakeFieldNumber = 1;
  ::google::protobuf::int32 fake() const;
  void set_fake(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DataMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 fake_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtnet_5fpackets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtNetMessage

// bool is_response = 1;
inline void VirtNetMessage::clear_is_response() {
  is_response_ = false;
}
inline bool VirtNetMessage::is_response() const {
  // @@protoc_insertion_point(field_get:VirtNetMessage.is_response)
  return is_response_;
}
inline void VirtNetMessage::set_is_response(bool value) {
  
  is_response_ = value;
  // @@protoc_insertion_point(field_set:VirtNetMessage.is_response)
}

// uint32 response_target = 2;
inline void VirtNetMessage::clear_response_target() {
  response_target_ = 0u;
}
inline ::google::protobuf::uint32 VirtNetMessage::response_target() const {
  // @@protoc_insertion_point(field_get:VirtNetMessage.response_target)
  return response_target_;
}
inline void VirtNetMessage::set_response_target(::google::protobuf::uint32 value) {
  
  response_target_ = value;
  // @@protoc_insertion_point(field_set:VirtNetMessage.response_target)
}

// .ManagementMessage management_message = 3;
inline bool VirtNetMessage::has_management_message() const {
  return content_case() == kManagementMessage;
}
inline void VirtNetMessage::set_has_management_message() {
  _oneof_case_[0] = kManagementMessage;
}
inline void VirtNetMessage::clear_management_message() {
  if (has_management_message()) {
    delete content_.management_message_;
    clear_has_content();
  }
}
inline ::ManagementMessage* VirtNetMessage::release_management_message() {
  // @@protoc_insertion_point(field_release:VirtNetMessage.management_message)
  if (has_management_message()) {
    clear_has_content();
      ::ManagementMessage* temp = content_.management_message_;
    content_.management_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ManagementMessage& VirtNetMessage::management_message() const {
  // @@protoc_insertion_point(field_get:VirtNetMessage.management_message)
  return has_management_message()
      ? *content_.management_message_
      : *reinterpret_cast< ::ManagementMessage*>(&::_ManagementMessage_default_instance_);
}
inline ::ManagementMessage* VirtNetMessage::mutable_management_message() {
  if (!has_management_message()) {
    clear_content();
    set_has_management_message();
    content_.management_message_ = CreateMaybeMessage< ::ManagementMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:VirtNetMessage.management_message)
  return content_.management_message_;
}

// .DataMessage data_message = 4;
inline bool VirtNetMessage::has_data_message() const {
  return content_case() == kDataMessage;
}
inline void VirtNetMessage::set_has_data_message() {
  _oneof_case_[0] = kDataMessage;
}
inline void VirtNetMessage::clear_data_message() {
  if (has_data_message()) {
    delete content_.data_message_;
    clear_has_content();
  }
}
inline ::DataMessage* VirtNetMessage::release_data_message() {
  // @@protoc_insertion_point(field_release:VirtNetMessage.data_message)
  if (has_data_message()) {
    clear_has_content();
      ::DataMessage* temp = content_.data_message_;
    content_.data_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataMessage& VirtNetMessage::data_message() const {
  // @@protoc_insertion_point(field_get:VirtNetMessage.data_message)
  return has_data_message()
      ? *content_.data_message_
      : *reinterpret_cast< ::DataMessage*>(&::_DataMessage_default_instance_);
}
inline ::DataMessage* VirtNetMessage::mutable_data_message() {
  if (!has_data_message()) {
    clear_content();
    set_has_data_message();
    content_.data_message_ = CreateMaybeMessage< ::DataMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:VirtNetMessage.data_message)
  return content_.data_message_;
}

inline bool VirtNetMessage::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void VirtNetMessage::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline VirtNetMessage::ContentCase VirtNetMessage::content_case() const {
  return VirtNetMessage::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ManagementMessage

// .CreateSocketRequest create_socket_request = 1;
inline bool ManagementMessage::has_create_socket_request() const {
  return content_case() == kCreateSocketRequest;
}
inline void ManagementMessage::set_has_create_socket_request() {
  _oneof_case_[0] = kCreateSocketRequest;
}
inline void ManagementMessage::clear_create_socket_request() {
  if (has_create_socket_request()) {
    delete content_.create_socket_request_;
    clear_has_content();
  }
}
inline ::CreateSocketRequest* ManagementMessage::release_create_socket_request() {
  // @@protoc_insertion_point(field_release:ManagementMessage.create_socket_request)
  if (has_create_socket_request()) {
    clear_has_content();
      ::CreateSocketRequest* temp = content_.create_socket_request_;
    content_.create_socket_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CreateSocketRequest& ManagementMessage::create_socket_request() const {
  // @@protoc_insertion_point(field_get:ManagementMessage.create_socket_request)
  return has_create_socket_request()
      ? *content_.create_socket_request_
      : *reinterpret_cast< ::CreateSocketRequest*>(&::_CreateSocketRequest_default_instance_);
}
inline ::CreateSocketRequest* ManagementMessage::mutable_create_socket_request() {
  if (!has_create_socket_request()) {
    clear_content();
    set_has_create_socket_request();
    content_.create_socket_request_ = CreateMaybeMessage< ::CreateSocketRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ManagementMessage.create_socket_request)
  return content_.create_socket_request_;
}

// .CreateSocketResponse create_socket_response = 2;
inline bool ManagementMessage::has_create_socket_response() const {
  return content_case() == kCreateSocketResponse;
}
inline void ManagementMessage::set_has_create_socket_response() {
  _oneof_case_[0] = kCreateSocketResponse;
}
inline void ManagementMessage::clear_create_socket_response() {
  if (has_create_socket_response()) {
    delete content_.create_socket_response_;
    clear_has_content();
  }
}
inline ::CreateSocketResponse* ManagementMessage::release_create_socket_response() {
  // @@protoc_insertion_point(field_release:ManagementMessage.create_socket_response)
  if (has_create_socket_response()) {
    clear_has_content();
      ::CreateSocketResponse* temp = content_.create_socket_response_;
    content_.create_socket_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CreateSocketResponse& ManagementMessage::create_socket_response() const {
  // @@protoc_insertion_point(field_get:ManagementMessage.create_socket_response)
  return has_create_socket_response()
      ? *content_.create_socket_response_
      : *reinterpret_cast< ::CreateSocketResponse*>(&::_CreateSocketResponse_default_instance_);
}
inline ::CreateSocketResponse* ManagementMessage::mutable_create_socket_response() {
  if (!has_create_socket_response()) {
    clear_content();
    set_has_create_socket_response();
    content_.create_socket_response_ = CreateMaybeMessage< ::CreateSocketResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ManagementMessage.create_socket_response)
  return content_.create_socket_response_;
}

inline bool ManagementMessage::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ManagementMessage::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ManagementMessage::ContentCase ManagementMessage::content_case() const {
  return ManagementMessage::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateSocketRequest

// uint32 address_family = 1;
inline void CreateSocketRequest::clear_address_family() {
  address_family_ = 0u;
}
inline ::google::protobuf::uint32 CreateSocketRequest::address_family() const {
  // @@protoc_insertion_point(field_get:CreateSocketRequest.address_family)
  return address_family_;
}
inline void CreateSocketRequest::set_address_family(::google::protobuf::uint32 value) {
  
  address_family_ = value;
  // @@protoc_insertion_point(field_set:CreateSocketRequest.address_family)
}

// uint32 type = 2;
inline void CreateSocketRequest::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 CreateSocketRequest::type() const {
  // @@protoc_insertion_point(field_get:CreateSocketRequest.type)
  return type_;
}
inline void CreateSocketRequest::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CreateSocketRequest.type)
}

// uint32 protocol = 3;
inline void CreateSocketRequest::clear_protocol() {
  protocol_ = 0u;
}
inline ::google::protobuf::uint32 CreateSocketRequest::protocol() const {
  // @@protoc_insertion_point(field_get:CreateSocketRequest.protocol)
  return protocol_;
}
inline void CreateSocketRequest::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:CreateSocketRequest.protocol)
}

// -------------------------------------------------------------------

// CreateSocketResponse

// uint32 status = 1;
inline void CreateSocketResponse::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 CreateSocketResponse::status() const {
  // @@protoc_insertion_point(field_get:CreateSocketResponse.status)
  return status_;
}
inline void CreateSocketResponse::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:CreateSocketResponse.status)
}

// uint32 handle = 2;
inline void CreateSocketResponse::clear_handle() {
  handle_ = 0u;
}
inline ::google::protobuf::uint32 CreateSocketResponse::handle() const {
  // @@protoc_insertion_point(field_get:CreateSocketResponse.handle)
  return handle_;
}
inline void CreateSocketResponse::set_handle(::google::protobuf::uint32 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:CreateSocketResponse.handle)
}

// -------------------------------------------------------------------

// DataMessage

// int32 fake = 1;
inline void DataMessage::clear_fake() {
  fake_ = 0;
}
inline ::google::protobuf::int32 DataMessage::fake() const {
  // @@protoc_insertion_point(field_get:DataMessage.fake)
  return fake_;
}
inline void DataMessage::set_fake(::google::protobuf::int32 value) {
  
  fake_ = value;
  // @@protoc_insertion_point(field_set:DataMessage.fake)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_virtnet_5fpackets_2eproto
