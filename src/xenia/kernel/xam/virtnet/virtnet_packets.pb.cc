// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: virtnet_packets.proto

#include "virtnet_packets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_virtnet_5fpackets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateSocketRequest_virtnet_5fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_virtnet_5fpackets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateSocketResponse_virtnet_5fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_virtnet_5fpackets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataMessage_virtnet_5fpackets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_virtnet_5fpackets_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ManagementMessage_virtnet_5fpackets_2eproto;
class VirtNetMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VirtNetMessage> _instance;
  const ::ManagementMessage* management_message_;
  const ::DataMessage* data_message_;
} _VirtNetMessage_default_instance_;
class ManagementMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ManagementMessage> _instance;
  const ::CreateSocketRequest* create_socket_request_;
  const ::CreateSocketResponse* create_socket_response_;
} _ManagementMessage_default_instance_;
class CreateSocketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateSocketRequest> _instance;
} _CreateSocketRequest_default_instance_;
class CreateSocketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateSocketResponse> _instance;
} _CreateSocketResponse_default_instance_;
class DataMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataMessage> _instance;
} _DataMessage_default_instance_;
static void InitDefaultsVirtNetMessage_virtnet_5fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VirtNetMessage_default_instance_;
    new (ptr) ::VirtNetMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VirtNetMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VirtNetMessage_virtnet_5fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVirtNetMessage_virtnet_5fpackets_2eproto}, {
      &scc_info_ManagementMessage_virtnet_5fpackets_2eproto.base,
      &scc_info_DataMessage_virtnet_5fpackets_2eproto.base,}};

static void InitDefaultsManagementMessage_virtnet_5fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManagementMessage_default_instance_;
    new (ptr) ::ManagementMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManagementMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ManagementMessage_virtnet_5fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsManagementMessage_virtnet_5fpackets_2eproto}, {
      &scc_info_CreateSocketRequest_virtnet_5fpackets_2eproto.base,
      &scc_info_CreateSocketResponse_virtnet_5fpackets_2eproto.base,}};

static void InitDefaultsCreateSocketRequest_virtnet_5fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateSocketRequest_default_instance_;
    new (ptr) ::CreateSocketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateSocketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateSocketRequest_virtnet_5fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateSocketRequest_virtnet_5fpackets_2eproto}, {}};

static void InitDefaultsCreateSocketResponse_virtnet_5fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateSocketResponse_default_instance_;
    new (ptr) ::CreateSocketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateSocketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateSocketResponse_virtnet_5fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateSocketResponse_virtnet_5fpackets_2eproto}, {}};

static void InitDefaultsDataMessage_virtnet_5fpackets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataMessage_default_instance_;
    new (ptr) ::DataMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataMessage_virtnet_5fpackets_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataMessage_virtnet_5fpackets_2eproto}, {}};


// ===================================================================

void VirtNetMessage::InitAsDefaultInstance() {
}
class VirtNetMessage::HasBitSetters {
 public:
  static const ::ManagementMessage& management_message(const VirtNetMessage* msg);
  static const ::DataMessage& data_message(const VirtNetMessage* msg);
};

const ::ManagementMessage&
VirtNetMessage::HasBitSetters::management_message(const VirtNetMessage* msg) {
  return *msg->content_.management_message_;
}
const ::DataMessage&
VirtNetMessage::HasBitSetters::data_message(const VirtNetMessage* msg) {
  return *msg->content_.data_message_;
}
void VirtNetMessage::set_allocated_management_message(::ManagementMessage* management_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (management_message) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      management_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, management_message, submessage_arena);
    }
    set_has_management_message();
    content_.management_message_ = management_message;
  }
  // @@protoc_insertion_point(field_set_allocated:VirtNetMessage.management_message)
}
void VirtNetMessage::set_allocated_data_message(::DataMessage* data_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (data_message) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_message, submessage_arena);
    }
    set_has_data_message();
    content_.data_message_ = data_message;
  }
  // @@protoc_insertion_point(field_set_allocated:VirtNetMessage.data_message)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtNetMessage::kIsResponseFieldNumber;
const int VirtNetMessage::kResponseTargetFieldNumber;
const int VirtNetMessage::kManagementMessageFieldNumber;
const int VirtNetMessage::kDataMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtNetMessage::VirtNetMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VirtNetMessage)
}
VirtNetMessage::VirtNetMessage(const VirtNetMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_response_, &from.is_response_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_target_) -
    reinterpret_cast<char*>(&is_response_)) + sizeof(response_target_));
  clear_has_content();
  switch (from.content_case()) {
    case kManagementMessage: {
      mutable_management_message()->::ManagementMessage::MergeFrom(from.management_message());
      break;
    }
    case kDataMessage: {
      mutable_data_message()->::DataMessage::MergeFrom(from.data_message());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:VirtNetMessage)
}

void VirtNetMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VirtNetMessage_virtnet_5fpackets_2eproto.base);
  ::memset(&is_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_target_) -
      reinterpret_cast<char*>(&is_response_)) + sizeof(response_target_));
  clear_has_content();
}

VirtNetMessage::~VirtNetMessage() {
  // @@protoc_insertion_point(destructor:VirtNetMessage)
  SharedDtor();
}

void VirtNetMessage::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void VirtNetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtNetMessage& VirtNetMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VirtNetMessage_virtnet_5fpackets_2eproto.base);
  return *internal_default_instance();
}


void VirtNetMessage::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:VirtNetMessage)
  switch (content_case()) {
    case kManagementMessage: {
      delete content_.management_message_;
      break;
    }
    case kDataMessage: {
      delete content_.data_message_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void VirtNetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VirtNetMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_target_) -
      reinterpret_cast<char*>(&is_response_)) + sizeof(response_target_));
  clear_content();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VirtNetMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VirtNetMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool is_response = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 response_target = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_response_target(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ManagementMessage management_message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ManagementMessage::_InternalParse;
        object = msg->mutable_management_message();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .DataMessage data_message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::DataMessage::_InternalParse;
        object = msg->mutable_data_message();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VirtNetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:VirtNetMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 response_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ManagementMessage management_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_management_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataMessage data_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VirtNetMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VirtNetMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VirtNetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VirtNetMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_response = 1;
  if (this->is_response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_response(), output);
  }

  // uint32 response_target = 2;
  if (this->response_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->response_target(), output);
  }

  // .ManagementMessage management_message = 3;
  if (has_management_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::management_message(this), output);
  }

  // .DataMessage data_message = 4;
  if (has_data_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::data_message(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:VirtNetMessage)
}

size_t VirtNetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VirtNetMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_response = 1;
  if (this->is_response() != 0) {
    total_size += 1 + 1;
  }

  // uint32 response_target = 2;
  if (this->response_target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->response_target());
  }

  switch (content_case()) {
    // .ManagementMessage management_message = 3;
    case kManagementMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.management_message_);
      break;
    }
    // .DataMessage data_message = 4;
    case kDataMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.data_message_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtNetMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VirtNetMessage*>(&from));
}

void VirtNetMessage::MergeFrom(const VirtNetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VirtNetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_response() != 0) {
    set_is_response(from.is_response());
  }
  if (from.response_target() != 0) {
    set_response_target(from.response_target());
  }
  switch (from.content_case()) {
    case kManagementMessage: {
      mutable_management_message()->::ManagementMessage::MergeFrom(from.management_message());
      break;
    }
    case kDataMessage: {
      mutable_data_message()->::DataMessage::MergeFrom(from.data_message());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void VirtNetMessage::CopyFrom(const VirtNetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VirtNetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtNetMessage::IsInitialized() const {
  return true;
}

void VirtNetMessage::Swap(VirtNetMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtNetMessage::InternalSwap(VirtNetMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_response_, other->is_response_);
  swap(response_target_, other->response_target_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::std::string VirtNetMessage::GetTypeName() const {
  return "VirtNetMessage";
}


// ===================================================================

void ManagementMessage::InitAsDefaultInstance() {
}
class ManagementMessage::HasBitSetters {
 public:
  static const ::CreateSocketRequest& create_socket_request(const ManagementMessage* msg);
  static const ::CreateSocketResponse& create_socket_response(const ManagementMessage* msg);
};

const ::CreateSocketRequest&
ManagementMessage::HasBitSetters::create_socket_request(const ManagementMessage* msg) {
  return *msg->content_.create_socket_request_;
}
const ::CreateSocketResponse&
ManagementMessage::HasBitSetters::create_socket_response(const ManagementMessage* msg) {
  return *msg->content_.create_socket_response_;
}
void ManagementMessage::set_allocated_create_socket_request(::CreateSocketRequest* create_socket_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (create_socket_request) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      create_socket_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_socket_request, submessage_arena);
    }
    set_has_create_socket_request();
    content_.create_socket_request_ = create_socket_request;
  }
  // @@protoc_insertion_point(field_set_allocated:ManagementMessage.create_socket_request)
}
void ManagementMessage::set_allocated_create_socket_response(::CreateSocketResponse* create_socket_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (create_socket_response) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      create_socket_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_socket_response, submessage_arena);
    }
    set_has_create_socket_response();
    content_.create_socket_response_ = create_socket_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ManagementMessage.create_socket_response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagementMessage::kCreateSocketRequestFieldNumber;
const int ManagementMessage::kCreateSocketResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagementMessage::ManagementMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManagementMessage)
}
ManagementMessage::ManagementMessage(const ManagementMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kCreateSocketRequest: {
      mutable_create_socket_request()->::CreateSocketRequest::MergeFrom(from.create_socket_request());
      break;
    }
    case kCreateSocketResponse: {
      mutable_create_socket_response()->::CreateSocketResponse::MergeFrom(from.create_socket_response());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ManagementMessage)
}

void ManagementMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ManagementMessage_virtnet_5fpackets_2eproto.base);
  clear_has_content();
}

ManagementMessage::~ManagementMessage() {
  // @@protoc_insertion_point(destructor:ManagementMessage)
  SharedDtor();
}

void ManagementMessage::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void ManagementMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManagementMessage& ManagementMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ManagementMessage_virtnet_5fpackets_2eproto.base);
  return *internal_default_instance();
}


void ManagementMessage::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:ManagementMessage)
  switch (content_case()) {
    case kCreateSocketRequest: {
      delete content_.create_socket_request_;
      break;
    }
    case kCreateSocketResponse: {
      delete content_.create_socket_response_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ManagementMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ManagementMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManagementMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ManagementMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .CreateSocketRequest create_socket_request = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CreateSocketRequest::_InternalParse;
        object = msg->mutable_create_socket_request();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .CreateSocketResponse create_socket_response = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CreateSocketResponse::_InternalParse;
        object = msg->mutable_create_socket_response();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManagementMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ManagementMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CreateSocketRequest create_socket_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_socket_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CreateSocketResponse create_socket_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_socket_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManagementMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManagementMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManagementMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManagementMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CreateSocketRequest create_socket_request = 1;
  if (has_create_socket_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::create_socket_request(this), output);
  }

  // .CreateSocketResponse create_socket_response = 2;
  if (has_create_socket_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::create_socket_response(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ManagementMessage)
}

size_t ManagementMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManagementMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .CreateSocketRequest create_socket_request = 1;
    case kCreateSocketRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.create_socket_request_);
      break;
    }
    // .CreateSocketResponse create_socket_response = 2;
    case kCreateSocketResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.create_socket_response_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManagementMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ManagementMessage*>(&from));
}

void ManagementMessage::MergeFrom(const ManagementMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManagementMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kCreateSocketRequest: {
      mutable_create_socket_request()->::CreateSocketRequest::MergeFrom(from.create_socket_request());
      break;
    }
    case kCreateSocketResponse: {
      mutable_create_socket_response()->::CreateSocketResponse::MergeFrom(from.create_socket_response());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void ManagementMessage::CopyFrom(const ManagementMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManagementMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagementMessage::IsInitialized() const {
  return true;
}

void ManagementMessage::Swap(ManagementMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagementMessage::InternalSwap(ManagementMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::std::string ManagementMessage::GetTypeName() const {
  return "ManagementMessage";
}


// ===================================================================

void CreateSocketRequest::InitAsDefaultInstance() {
}
class CreateSocketRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSocketRequest::kAddressFamilyFieldNumber;
const int CreateSocketRequest::kTypeFieldNumber;
const int CreateSocketRequest::kProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSocketRequest::CreateSocketRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateSocketRequest)
}
CreateSocketRequest::CreateSocketRequest(const CreateSocketRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&address_family_, &from.address_family_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&address_family_)) + sizeof(protocol_));
  // @@protoc_insertion_point(copy_constructor:CreateSocketRequest)
}

void CreateSocketRequest::SharedCtor() {
  ::memset(&address_family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_) -
      reinterpret_cast<char*>(&address_family_)) + sizeof(protocol_));
}

CreateSocketRequest::~CreateSocketRequest() {
  // @@protoc_insertion_point(destructor:CreateSocketRequest)
  SharedDtor();
}

void CreateSocketRequest::SharedDtor() {
}

void CreateSocketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSocketRequest& CreateSocketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateSocketRequest_virtnet_5fpackets_2eproto.base);
  return *internal_default_instance();
}


void CreateSocketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateSocketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&address_family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_) -
      reinterpret_cast<char*>(&address_family_)) + sizeof(protocol_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateSocketRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateSocketRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 address_family = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_address_family(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 protocol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_protocol(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateSocketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CreateSocketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 address_family = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_family_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateSocketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateSocketRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateSocketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateSocketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address_family = 1;
  if (this->address_family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->address_family(), output);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->protocol(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CreateSocketRequest)
}

size_t CreateSocketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateSocketRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address_family = 1;
  if (this->address_family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address_family());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSocketRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateSocketRequest*>(&from));
}

void CreateSocketRequest::MergeFrom(const CreateSocketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateSocketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address_family() != 0) {
    set_address_family(from.address_family());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
}

void CreateSocketRequest::CopyFrom(const CreateSocketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateSocketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSocketRequest::IsInitialized() const {
  return true;
}

void CreateSocketRequest::Swap(CreateSocketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSocketRequest::InternalSwap(CreateSocketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(address_family_, other->address_family_);
  swap(type_, other->type_);
  swap(protocol_, other->protocol_);
}

::std::string CreateSocketRequest::GetTypeName() const {
  return "CreateSocketRequest";
}


// ===================================================================

void CreateSocketResponse::InitAsDefaultInstance() {
}
class CreateSocketResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSocketResponse::kStatusFieldNumber;
const int CreateSocketResponse::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSocketResponse::CreateSocketResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateSocketResponse)
}
CreateSocketResponse::CreateSocketResponse(const CreateSocketResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&status_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:CreateSocketResponse)
}

void CreateSocketResponse::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handle_) -
      reinterpret_cast<char*>(&status_)) + sizeof(handle_));
}

CreateSocketResponse::~CreateSocketResponse() {
  // @@protoc_insertion_point(destructor:CreateSocketResponse)
  SharedDtor();
}

void CreateSocketResponse::SharedDtor() {
}

void CreateSocketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSocketResponse& CreateSocketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateSocketResponse_virtnet_5fpackets_2eproto.base);
  return *internal_default_instance();
}


void CreateSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handle_) -
      reinterpret_cast<char*>(&status_)) + sizeof(handle_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateSocketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateSocketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 handle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateSocketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CreateSocketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateSocketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateSocketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateSocketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // uint32 handle = 2;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CreateSocketResponse)
}

size_t CreateSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateSocketResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // uint32 handle = 2;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSocketResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateSocketResponse*>(&from));
}

void CreateSocketResponse::MergeFrom(const CreateSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void CreateSocketResponse::CopyFrom(const CreateSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSocketResponse::IsInitialized() const {
  return true;
}

void CreateSocketResponse::Swap(CreateSocketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSocketResponse::InternalSwap(CreateSocketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(handle_, other->handle_);
}

::std::string CreateSocketResponse::GetTypeName() const {
  return "CreateSocketResponse";
}


// ===================================================================

void DataMessage::InitAsDefaultInstance() {
}
class DataMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataMessage::kFakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataMessage::DataMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMessage)
}
DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fake_ = from.fake_;
  // @@protoc_insertion_point(copy_constructor:DataMessage)
}

void DataMessage::SharedCtor() {
  fake_ = 0;
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:DataMessage)
  SharedDtor();
}

void DataMessage::SharedDtor() {
}

void DataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataMessage& DataMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DataMessage_virtnet_5fpackets_2eproto.base);
  return *internal_default_instance();
}


void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fake_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DataMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 fake = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fake(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DataMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fake = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fake = 1;
  if (this->fake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fake(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DataMessage)
}

size_t DataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fake = 1;
  if (this->fake() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fake());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataMessage*>(&from));
}

void DataMessage::MergeFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fake() != 0) {
    set_fake(from.fake());
  }
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataMessage::InternalSwap(DataMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fake_, other->fake_);
}

::std::string DataMessage::GetTypeName() const {
  return "DataMessage";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::VirtNetMessage* Arena::CreateMaybeMessage< ::VirtNetMessage >(Arena* arena) {
  return Arena::CreateInternal< ::VirtNetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ManagementMessage* Arena::CreateMaybeMessage< ::ManagementMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ManagementMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateSocketRequest* Arena::CreateMaybeMessage< ::CreateSocketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CreateSocketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateSocketResponse* Arena::CreateMaybeMessage< ::CreateSocketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CreateSocketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DataMessage* Arena::CreateMaybeMessage< ::DataMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DataMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
